open Init

let next_iter iteration = 1 + iteration

let _print (level : int) (iteration : int) (value : value) =
  print_string level;
  print_string "-";
  print_string iteration;
  print_string ":";
  print_string value;
  print_string level;
  print_string "-";
  print_string (next_iter iteration);
  print_string ">"

let parse (s : string) : exp =
  let lexbuf = Lexing.from_string s in
  let ast = Parser.prog Lexer.read lexbuf in
  ast
let read_inp_exp : unit -> exp =
  fun () ->
  let ln = read_line () in
  parse ln

let first_iteration = 0
let _generate_toplevel_cont my_lv my_env : cont =
  let rec elementary_loop iteration =
    fun value tau ->
    _print my_level iteration value;
    _eval (read_inp_exp ()) my_env (elementary_loop (next_iter iteration)) tau in
  elementary_loop first_iteration

let level_above level = 1 + level
let init_meta_cont level =
  let an_init_env = make_init_env () in
  let an_init_cont = _gen_toplv_cont (level_above level) an_init_env in
  Tower ((an_init_env, an_init_cont),
         (fun () -> init_meta_cont (level_above level)))
                          
let blond =
  fun () ->
  table_common := table_common_initial;
  let initial_level = 0 in
  let cont = _gen_toplv_cont initial_level (make_init_env ()) in
  cont blond_banner (init_meta_cont initial_level)
