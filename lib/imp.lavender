(define eval-aexp-binop
  (lambda (op e1 e2 st)
    (case op
      ((+) (+ (eval-aexp e1 st) (eval-aexp e2 st)))
      ((-) (- (eval-aexp e1 st) (eval-aexp e2 st)))
      ((*) (* (eval-aexp e1 st) (eval-aexp e2 st)))
      ((/) (/ (eval-aexp e1 st) (eval-aexp e2 st)))
      (else '(eval-aexp-binop-error)))))
(define lookup
  (lambda (st name)
    (cond
     ((null? st) '())
     ((equal? name (caar st)) (cdar st))
     (else (lookup (cdr st) name)))))

(define eval-aexp
  (lambda (aexp st)
    (cond ((number? aexp) aexp)
	  ((symbol? aexp) (lookup st aexp))
	  ((and (pair? aexp) (= 3 (length aexp)))
	   (eval-aexp-binop (cadr aexp) (car aexp) (caddr aexp) st)))))
	     

(define eval-bool
  (lambda (bexp st)
    (let ((boolop (cadr bexp))
	  (e1 (car bexp))
	  (e2 (caddr bexp)))
      (case boolop
	((=)
	 (= (eval-aexp e1 st) (eval-aexp e2 st)))
	((>)
	 (> (eval-aexp e1 st) (eval-aexp e2 st)))
	((<)
	 (< (eval-aexp e1 st) (eval-aexp e2 st)))
	((>=)
	 (>= (eval-aexp e1 st) (eval-aexp e2 st)))
	((<=)
	 (<= (eval-aexp e1 st) (eval-aexp e2 st)))))))

; statement -> state -> guard -> (state * guard)
(define eval-stmt
  (lambda (stmt st)
    (if (and (pair? st) (equal? (car st) 'imp-syntax-error)) st
	(case (car stmt)
	   ((if)
	    (let ((then-stmts (caddr (cdr stmt) ))
		  (else-stmts (caddr (cdddr stmt)))
		  (bool-ans (eval-bool (cadr stmt) st)))	       
	      (if bool-ans
		  (eval-stmt-lst then-stmts st)
		  (eval-stmt-lst else-stmts st))))
	   ((while)
	    (let ((loop-body (car (cdddr stmt)))
		  (bool-ans (eval-bool (cadr stmt) st)))
	      (if bool-ans
		  (eval-stmt stmt (eval-stmt-lst loop-body st))
		  st)))
	   (else
	    (if (and (= 3 (length stmt))
		     (equal? '= (cadr stmt)))
		(cons (cons (car stmt) (eval-aexp (caddr stmt) st)) st)
		(cons 'imp-syntax-error stmt)))))))
(define eval-stmt-lst
  (lambda (stmts st)
    (if (null? stmts)
	st
	(let ((stmt (car stmts)) (rst (cdr stmts)))
	  (eval-stmt-lst rst (eval-stmt stmt st))))))

(define prog1
  '((a = 2)
    (b = 10)
    (c = (a * 2))
    (if (c = 10)
	then 
	((a = (a * 8)))
	else
	((a = (a * 9))))
    (while (a > 10) do
	   ((b = (b + 1))
	    (a = (a - 1))))
    ))
