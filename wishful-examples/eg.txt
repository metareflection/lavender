0-0: "bottom-level"
0-1> (load "../wishful-examples/rpn.lavender")
0-1: "../wishful-examples/rpn.lavender"
0-2> (common-define del (delta (e r k f) (let ((new-e (cons 'list (rpn e)))) (meaning new-e r k default-eval))))
0-2: del
0-3> ((delta (e r k f) (begin (f del) (meaning e r k f))) 40 2 5 9 + * -)
0-3: -12
0-4> (1 2 3 4 + * +)
0-4: 15
0-5> ('lavender lavender-exit)
> (lavender)
0-0: "bottom-level"
0-1> (load "../wishful-examples/rpn.lavender")
0-1: "../wishful-examples/rpn.lavender"
0-2> (common-define del (delta (e r k f) (meaning (rpn e) r k default-eval)))
0-2: del
0-3> ((delta (e r k f) (begin (f del) (meaning e r k default-eval))) + 40 2)
0-3: 42
0-4> (1 2 3 4 + * +)
0-4: 15
0-5> ('lavender lavender-exit)
> (lavender)
0-0: "bottom-level"
0-1> (load "../wishful-examples/rpn.lavender")
0-1: "../wishful-examples/rpn.lavender"
0-2> ((delta (e r k f) (begin (f rpn) (meaning e r k default-eval))) + 40 2)
0-2: 42
0-3> (list 1 2 3 4 + * +)
0-3: 15
0-4> 

